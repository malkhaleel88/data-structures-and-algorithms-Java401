/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge15;


import challenge15.structure.BinarySearchTree;
import com.google.common.base.Verify;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    /**
     *  Code Challenge 15 Test
     */

    @Test
    public void emptyTreeTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();

        assertEquals("BinarySearchTree { root=null }", binaryTreeTest.toString());
    }

    @Test
    public void singleRootTreeTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.add(7);

        assertEquals("BinarySearchTree { root=BinaryTreeNode { data=7, leftNode=null, rightNode=null } }", binaryTreeTest.toString());
    }

    @Test
    public void addLeftAndRightChildTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();
        binaryTreeTest.add(7);
        binaryTreeTest.add(9);
        binaryTreeTest.add(5);

        assertEquals("BinarySearchTree { root=BinaryTreeNode { data=7, leftNode=BinaryTreeNode { data=5, leftNode=null, rightNode=null }, rightNode=BinaryTreeNode { data=9, leftNode=null, rightNode=null } } }", binaryTreeTest.toString());
    }

    @Test
    public void preOrderTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();

        binaryTreeTest.add(23);
        binaryTreeTest.add(8);
        binaryTreeTest.add(42);
        binaryTreeTest.add(4);
        binaryTreeTest.add(16);
        binaryTreeTest.add(27);
        binaryTreeTest.add(85);

       assertEquals("[23, 8, 4, 16, 42, 27, 85]", binaryTreeTest.preOrder().toString());

    }

    @Test
    public void inOrderTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();

        binaryTreeTest.add(23);
        binaryTreeTest.add(8);
        binaryTreeTest.add(42);
        binaryTreeTest.add(4);
        binaryTreeTest.add(16);
        binaryTreeTest.add(27);
        binaryTreeTest.add(85);

        assertEquals("[4, 8, 16, 23, 27, 42, 85]", binaryTreeTest.inOrder().toString());

    }

    @Test
    public void postOrderTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();

        binaryTreeTest.add(23);
        binaryTreeTest.add(8);
        binaryTreeTest.add(42);
        binaryTreeTest.add(4);
        binaryTreeTest.add(16);
        binaryTreeTest.add(27);
        binaryTreeTest.add(85);

        assertEquals("[4, 16, 8, 27, 85, 42, 23]", binaryTreeTest.postOrder().toString());

    }

    @Test
    public void containsTest(){

        BinarySearchTree<Integer> binaryTreeTest = new BinarySearchTree<>();

        binaryTreeTest.add(23);
        binaryTreeTest.add(8);
        binaryTreeTest.add(42);
        binaryTreeTest.add(4);

        assertTrue(binaryTreeTest.contains(42));
        assertFalse(binaryTreeTest.contains(7));
    }
}
