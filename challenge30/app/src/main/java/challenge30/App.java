/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge30;

import java.util.HashMap;

public class App {

    public static void main(String[] args) {

        /**
         * Code Challenge 30
         */

        HashTable<String, Integer> employeeSalary = new HashTable<String, Integer>();

        employeeSalary.add("Mohammad", 1000);
        employeeSalary.add("Ahmad", 900);
        employeeSalary.add("Abdelqader", 1100);
        employeeSalary.add("Ghadeer", 1500);
        employeeSalary.add("Naim", 1200);

        System.out.println("The size is => " + employeeSalary.getSize());
        System.out.println("Mohammad salary is => " + employeeSalary.get("Mohammad"));
        System.out.println("Is it contains Ahmad? => " + employeeSalary.contains("Ahmad"));
        System.out.println("Delete Ahmad => " + employeeSalary.remove("Ahmad"));
        System.out.println("The size is => " + employeeSalary.getSize());
        System.out.println("Is it contains Ahmad? => " + employeeSalary.contains("Ahmad"));

        System.out.println("================================");

        /**
         * Code Challenge 31
         */

        HashTable<String, Integer> wordFinder = new HashTable<String, Integer>();

        String paragraph = "It was the best of times, it was the worst of times, it was the age of wisdom, it was the age of foolishness, it was the epoch of belief, it was the epoch of incredulity, it was the season of Light, it was the season of Darkness, it was the spring of hope, it was the winter of despair, we had everything before us, we had nothing before us, we were all going direct to Heaven, we were all going direct the other way â€“ in short, the period was so far like the present period, that some of its noisiest authorities insisted on its being received, for good or for evil, in the superlative degree of comparison only";

        System.out.println("Repeated word is => " + wordFinder.repeatedWord(paragraph));

        System.out.println("================================");

        /**
         * Code Challenge 32
         */

        HashTable<Integer, Integer> intersection = new HashTable<Integer, Integer>();

        BinaryTree tree1 = new BinaryTree();
        BinaryTree tree2 = new BinaryTree();

        tree1.setRoot(new BinaryTreeNode(150));
        tree1.getRoot().setLeft(new BinaryTreeNode(100));
        tree1.getRoot().setRight(new BinaryTreeNode(250));
        tree1.getRoot().getRight().setLeft(new BinaryTreeNode(200));
        tree1.getRoot().getRight().setRight(new BinaryTreeNode(350));
        tree1.getRoot().getRight().getRight().setLeft(new BinaryTreeNode(300));
        tree1.getRoot().getRight().getRight().setRight(new BinaryTreeNode(500));
        tree1.getRoot().getLeft().setLeft(new BinaryTreeNode(75));
        tree1.getRoot().getLeft().setRight(new BinaryTreeNode(160));
        tree1.getRoot().getLeft().getRight().setLeft(new BinaryTreeNode(125));
        tree1.getRoot().getLeft().getRight().setRight(new BinaryTreeNode(175));

        tree2.setRoot(new BinaryTreeNode(42));
        tree2.getRoot().setLeft(new BinaryTreeNode(100));
        tree2.getRoot().setRight(new BinaryTreeNode(600));
        tree2.getRoot().getRight().setLeft(new BinaryTreeNode(200));
        tree2.getRoot().getRight().setRight(new BinaryTreeNode(350));
        tree2.getRoot().getRight().getRight().setLeft(new BinaryTreeNode(4));
        tree2.getRoot().getRight().getRight().setRight(new BinaryTreeNode(500));
        tree2.getRoot().getLeft().setLeft(new BinaryTreeNode(15));
        tree2.getRoot().getLeft().setRight(new BinaryTreeNode(160));
        tree2.getRoot().getLeft().getRight().setLeft(new BinaryTreeNode(125));
        tree2.getRoot().getLeft().getRight().setRight(new BinaryTreeNode(175));

        System.out.println(intersection.treeIntersection(tree1, tree2));

        System.out.println("================================");

        /**
         * Code Challenge 33
         */

        HashMap<String, String> firstHashMap = new HashMap<>();
        HashMap<String, String> secondHashMap = new HashMap<>();

        firstHashMap.put("fond", "enamored");
        firstHashMap.put("wrath", "anger");
        firstHashMap.put("diligent", "employed");
        firstHashMap.put("outfit", "garb");
        firstHashMap.put("guide", "usher");

        secondHashMap.put("fond", "averse");
        secondHashMap.put("wrath", "delight");
        secondHashMap.put("diligent", "idle");
        secondHashMap.put("guide", "follow");
        secondHashMap.put("flow", "jam");

        System.out.println(HashTable.leftJoin(firstHashMap, secondHashMap));
    }
}