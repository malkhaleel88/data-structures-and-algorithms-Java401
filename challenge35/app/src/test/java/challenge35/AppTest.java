/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package challenge35;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    /**
     *  Code Challenge 35 Test
     */

    @Test
    public void addNode(){

        Graph graph = new Graph();

        graph.addNode("Mohammad");
        graph.addNode("Ghadeer");

        assertNotNull(graph.getNodes());
        assertEquals(2, graph.size());
    }

    @Test
    public void addEdge(){

        Graph graph = new Graph();

        graph.addNode("Mohammad");
        graph.addNode("Ghadeer");

        graph.addEdge("Mohammad", "Ghadeer");

        assertEquals("\n" +
                "Ghadeer is connected to [Mohammad]\n" +
                "Mohammad is connected to [Ghadeer]", graph.printGraph());
    }

    @Test
    public void NodeNeighbors(){

        Graph graph = new Graph();

        graph.addNode("Mohammad");
        graph.addNode("Ghadeer");
        graph.addNode("Naim");
        graph.addNode("Osaid");

        graph.addEdge("Mohammad", "Ghadeer");
        graph.addEdge("Mohammad", "Naim");
        graph.addEdge("Osaid", "Ghadeer");

        assertEquals("[Ghadeer, Naim]", graph.getNeighbors("Mohammad").toString());
        assertEquals("[Ghadeer]", graph.getNeighbors("Osaid").toString());

    }

    @Test
    public void oneNodeAndOneEdge(){

        Graph graph = new Graph();

        graph.addNode("Mohammad");

        graph.addEdge("Mohammad","Mohammad");

        assertEquals("\n" +
                "Mohammad is connected to [Mohammad, Mohammad]", graph.printGraph());
    }

    @Test
    public void emptyGraph(){

        Graph graph = new Graph();

        assertEquals(0, graph.size());

        assertEquals("[]", graph.getNodes().toString());
    }

    /**
     *  Code Challenge 36 Test
     */

    @Test
    public void breadthFirst(){

        Graph graph = new Graph();

        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");
        graph.addNode("Monstroplolis");
        graph.addNode("Narnia");
        graph.addNode("Naboo");

        graph.addEdge("Pandora", "Arendelle");
        graph.addEdge("Arendelle", "Metroville");
        graph.addEdge("Arendelle", "Monstroplolis");
        graph.addEdge("Metroville", "Narnia");
        graph.addEdge("Metroville", "Naboo");
        graph.addEdge("Metroville", "Monstroplolis");
        graph.addEdge("Monstroplolis", "Naboo");
        graph.addEdge("Narnia", "Naboo");

        assertEquals("[Pandora, Arendelle, Metroville, Monstroplolis, Narnia, Naboo]", graph.breadthTraverse("Pandora").toString());
    }

    @Test
    public void breadthFirstOneVertex(){

        Graph graph = new Graph();

        graph.addNode("Pandora");
        assertEquals("[Pandora]", graph.breadthTraverse("Pandora").toString());
    }

    @Test
    public void breadthFirstTest(){

        Graph graph = new Graph();

        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");

        graph.addEdge("Pandora", "Arendelle");

        assertEquals("[Pandora, Arendelle]", graph.breadthTraverse("Pandora").toString());
    }

    /**
     *  Code Challenge 37 Test
     */

    @Test
    public void testEmpty() {

        Graph graph = new Graph();
        List<String> path = new ArrayList<>();

        assertEquals("null", graph.businessTrip(graph, path));
    }

    @Test
    public void testOnlyListItem() {

        Graph graph = new Graph();
        List<String> path = new ArrayList<>();

        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");
        graph.addNode("Monstroplolis");
        graph.addNode("Narnia");
        graph.addNode("Naboo");

        graph.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph.addEdgeWithWeight("Pandora", "Metroville", 82);


        graph.addEdgeWithWeight("Arendelle", "Metroville", 99);
        graph.addEdgeWithWeight("Arendelle", "Monstroplolis", 42);

        graph.addEdgeWithWeight("Metroville", "Monstroplolis", 105);
        graph.addEdgeWithWeight("Metroville", "Narnia", 37);
        graph.addEdgeWithWeight("Metroville", "Naboo", 26);

        graph.addEdgeWithWeight("Monstroplolis", "Naboo", 73);
        graph.addEdgeWithWeight("Narnia", "Naboo", 250);

        path.add("Metroville");

        assertEquals("null", graph.businessTrip(graph, path));

    }

    @Test
    public void testDifferentPaths() {

        Graph graph = new Graph();
        List<String> path = new ArrayList<>();

        graph.addNode("Pandora");
        graph.addNode("Arendelle");
        graph.addNode("Metroville");
        graph.addNode("Monstroplolis");
        graph.addNode("Narnia");
        graph.addNode("Naboo");

        graph.addEdgeWithWeight("Pandora", "Arendelle", 150);
        graph.addEdgeWithWeight("Pandora", "Metroville", 82);


        graph.addEdgeWithWeight("Arendelle", "Metroville", 99);
        graph.addEdgeWithWeight("Arendelle", "Monstroplolis", 42);

        graph.addEdgeWithWeight("Metroville", "Monstroplolis", 105);
        graph.addEdgeWithWeight("Metroville", "Narnia", 37);
        graph.addEdgeWithWeight("Metroville", "Naboo", 26);

        graph.addEdgeWithWeight("Monstroplolis", "Naboo", 73);
        graph.addEdgeWithWeight("Narnia", "Naboo", 250);

        path.add("Metroville");
        path.add("Pandora");

        assertEquals("True, $82", graph.businessTrip(graph, path));

        List<String> path1 = new ArrayList<>();
        path1.add("Arendelle");
        path1.add("Monstroplolis");
        path1.add("Naboo");

        assertEquals("True, $115", graph.businessTrip(graph, path1));

        List<String> path2 = new ArrayList<>();
        path2.add("Naboo");
        path2.add("Pandora");

        assertEquals("False, $0", graph.businessTrip(graph, path2));

        List<String> path3 = new ArrayList<>();
        path3.add("Narnia");
        path3.add("Arendelle");
        path3.add("Naboo");

        assertEquals("False, $0", graph.businessTrip(graph, path3));
    }



}
